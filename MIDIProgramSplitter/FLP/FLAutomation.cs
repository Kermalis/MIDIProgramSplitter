using Kermalis.EndianBinaryIO;
using System;
using System.Collections.Generic;

namespace MIDIProgramSplitter.FLP;

internal sealed class FLAutomation
{
	public struct Point
	{
		public const int LEN = 24;

		public uint AbsoluteTicks;
		public uint Value;
	}

	private static ReadOnlySpan<byte> NewPlugin_DeselectedTopLeft => new byte[52]
	{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
		0x54, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x06, 0x00,
		0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00
	};

	private static ReadOnlySpan<byte> BasicChanParams => new byte[24] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	private static ReadOnlySpan<byte> ChanPoly => new byte[9] { 0x01, 0x00, 0x00, 0x00, 0xF4, 0x01, 0x00, 0x00, 0x00 };

	private static ReadOnlySpan<byte> ChanParams => new byte[168]
	{
		0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
		0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F,
		0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
		0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x04, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
		0xA7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x3F,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x3F
	};

	public readonly string Name;
	public readonly List<Point> Points;

	public FLAutomation(string name)
	{
		Name = name;
		Points = new List<Point>();
	}

	public void Write(EndianBinaryWriter w, int i, uint filterNum)
	{
		FLProject.WriteWordEvent(w, FLEvent.NewChan, (ushort)i);
		FLProject.WriteByteEvent(w, FLEvent.ChanType, (byte)FLChanType.Automation);
		FLProject.WriteUTF16EventWithLength(w, FLEvent.DefPluginName, "\0");
		FLProject.WriteBytesEventWithLength(w, FLEvent.NewPlugin, NewPlugin_DeselectedTopLeft);
		FLProject.WriteUTF16EventWithLength(w, FLEvent.PluginName, Name + '\0');
		FLProject.WriteDWordEvent(w, FLEvent.PluginIcon, 0);
		FLProject.WriteDWordEvent(w, FLEvent.Color, 0x60608E);
		FLProject.WriteByteEvent(w, FLEvent.ChanEnabled, 1);
		FLProject.WriteBytesEventWithLength(w, FLEvent.Delay, FLChannel.Delay);
		FLProject.WriteDWordEvent(w, FLEvent.DelayReso, 0x800_080);
		FLProject.WriteDWordEvent(w, FLEvent.Reverb, 0x10_000);
		FLProject.WriteWordEvent(w, FLEvent.ShiftDelay, 0);
		FLProject.WriteWordEvent(w, FLEvent.SwingMix, 0x80);
		FLProject.WriteWordEvent(w, FLEvent.FX, 0x80);
		FLProject.WriteWordEvent(w, FLEvent.FX3, 0x100);
		FLProject.WriteWordEvent(w, FLEvent.CutOff, 0x400);
		FLProject.WriteWordEvent(w, FLEvent.Resonance, 0);
		FLProject.WriteWordEvent(w, FLEvent.PreAmp, 0);
		FLProject.WriteWordEvent(w, FLEvent.Decay, 0);
		FLProject.WriteWordEvent(w, FLEvent.Attack, 0);
		FLProject.WriteWordEvent(w, FLEvent.StDel, 0x800);
		FLProject.WriteDWordEvent(w, FLEvent.FXSine, 0x800_000);
		FLProject.WriteWordEvent(w, FLEvent.Fade_Stereo, 0);
		FLProject.WriteByteEvent(w, FLEvent.TargetFXTrack, 0);
		FLProject.WriteBytesEventWithLength(w, FLEvent.BasicChanParams, BasicChanParams);
		FLProject.WriteBytesEventWithLength(w, FLEvent.ChanOfsLevels, FLChannel.ChanOfsLevels);
		FLProject.WriteBytesEventWithLength(w, FLEvent.ChanPoly, ChanPoly);
		FLProject.WriteBytesEventWithLength(w, FLEvent.ChanParams, ChanParams);
		FLProject.WriteDWordEvent(w, FLEvent.CutCutBy, 0);
		FLProject.WriteDWordEvent(w, FLEvent.LayerFlags, 0);
		FLProject.WriteDWordEvent(w, FLEvent.ChanFilterNum, filterNum);
		WriteChanAC(w);
		FLProject.WriteByteEvent(w, FLEvent.Unk_32, 0);
		FLProject.WriteBytesEventWithLength(w, FLEvent.Tracking, FLChannel.Tracking0);
		FLProject.WriteBytesEventWithLength(w, FLEvent.Tracking, FLChannel.Tracking1);
		FLProject.WriteBytesEventWithLength(w, FLEvent.Envelope, FLChannel.EnvelopeOther);
		FLProject.WriteBytesEventWithLength(w, FLEvent.Envelope, FLChannel.Envelope1);
		FLProject.WriteBytesEventWithLength(w, FLEvent.Envelope, FLChannel.EnvelopeOther);
		FLProject.WriteBytesEventWithLength(w, FLEvent.Envelope, FLChannel.EnvelopeOther);
		FLProject.WriteBytesEventWithLength(w, FLEvent.Envelope, FLChannel.EnvelopeOther);
		FLProject.WriteDWordEvent(w, FLEvent.SampleFlags, 0b0011);
		FLProject.WriteByteEvent(w, FLEvent.LoopType, 0);
	}
	private void WriteChanAC(EndianBinaryWriter w)
	{

	}
}
