using Kermalis.EndianBinaryIO;
using Kermalis.MIDI;
using System;

namespace MIDIProgramSplitter.FLP;

internal struct FLPluginParams
{
	public static ReadOnlySpan<byte> FruityLSD_PluginParams => new byte[97]
	{
		0x00, 0x00, 0x00, 0x00,
		0x80,
		0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x80,
		0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00
	};

	private static ReadOnlySpan<byte> MIDIOut_PluginParamsPart1 => new byte[4]
	{
		0x06, 0x00, 0x00, 0x00
	};
	private static ReadOnlySpan<byte> MIDIOut_PluginParamsPart2 => new byte[25]
	{
		0x00, 0x00, 0x00,
		0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x01, 0x00
	};
	private static ReadOnlySpan<byte> MIDIOut_PluginParamsPart3 => new byte[352]
	{
		0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,

		0xFF,
		0x06, 0x50, 0x61, 0x67, 0x65, 0x20, 0x31, // ACK"Page 1"
		0x06, 0x50, 0x61, 0x67, 0x65, 0x20, 0x32, // ACK"Page 2"
		0x06, 0x50, 0x61, 0x67, 0x65, 0x20, 0x33, // ACK"Page 3"
		0x06, 0x50, 0x61, 0x67, 0x65, 0x20, 0x34, // ACK"Page 4"
		0x06, 0x50, 0x61, 0x67, 0x65, 0x20, 0x35, // ACK"Page 5"
		0x06, 0x50, 0x61, 0x67, 0x65, 0x20, 0x36, // ACK"Page 6"
		0x06, 0x50, 0x61, 0x67, 0x65, 0x20, 0x37, // ACK"Page 7"
		0x06, 0x50, 0x61, 0x67, 0x65, 0x20, 0x38, // ACK"Page 8"

		0x00, 0x00, 0x00, 0x00
	};

	public static void WriteMIDIOut(EndianBinaryWriter w, byte midiChannel, MIDIProgram program)
	{
		w.WriteEnum(FLEvent.PluginParams);
		FLProjectWriter.WriteArrayEventLength(w, 383);

		w.WriteBytes(MIDIOut_PluginParamsPart1);
		w.WriteByte(midiChannel);
		w.WriteBytes(MIDIOut_PluginParamsPart2);
		w.WriteByte((byte)(program + 1));
		w.WriteBytes(MIDIOut_PluginParamsPart3);
	}
}
