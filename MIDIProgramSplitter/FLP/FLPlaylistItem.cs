using Kermalis.EndianBinaryIO;
using System.Collections.Generic;

namespace MIDIProgramSplitter.FLP;

internal sealed class FLPlaylistItem
{
	public const int LEN = 32;

	// For patterns:
	// @00-03 AbsoluteTick
	// @04-05 ? Always 0x5000
	// @06-07: 0x50xx = Pattern, 0x00xx = AutomationChannel
	// @08-11 DurationTicks
	// @12-13 500-val = PlaylistTrack from 1index
	// @14-15 ? Always 0
	// @16-17 ? Always 120 (0x0078)
	// @18 ? Always 0x40
	// @19 IsSelected. 0x80 if selected, 0x00 if deselected, 0x20 if disabled and deselected, 0xA0 if disabled and selected
	// @20 ? Always 0x40
	// @21 ? Always 0x64
	// @22-23 ? Always 0x8080
	// @24-31 ? All 0xFF for patterns, 0xBF800000 (-1f) 0xBF800000 for automations

	// Pat1 at track0 1:01:00
	// [0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x01, 0x50, // 00-07
	//  0x80, 0x01, 0x00, 0x00, 0xF3, 0x01, 0x00, 0x00, // 08-15
	//  0x78, 0x00, 0x40, 0x00, 0x40, 0x64, 0x80, 0x80, // 16-23
	//  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF] // 24-31

	// Pat2 at track1 1:05:00
	//  0x60, 0x00, 0x00, 0x00, 0x00, 0x50, 0x02, 0x50,
	//  0x80, 0x01, 0x00, 0x00, 0xF2, 0x01, 0x00, 0x00,
	//  0x78, 0x00, 0x40, 0x80, 0x40, 0x64, 0x80, 0x80,
	//  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]

	// [0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x03, 0x00,
	//  0xE0, 0x01, 0x00, 0x00, 0xF1, 0x01, 0x00, 0x00,
	//  0x78, 0x00, 0x40, 0x00, 0x40, 0x64, 0x80, 0x80,
	//  0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x80, 0xBF,

	//  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x01, 0x50,
	//  0x80, 0x01, 0x00, 0x00, 0xF3, 0x01, 0x00, 0x00,
	//  0x78, 0x00, 0x40, 0x00, 0x40, 0x64, 0x80, 0x80,
	//  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,

	//  0x60, 0x00, 0x00, 0x00, 0x00, 0x50, 0x02, 0x50,
	//  0x80, 0x01, 0x00, 0x00, 0xF2, 0x01, 0x00, 0x00,
	//  0x78, 0x00, 0x40, 0x00, 0x40, 0x64, 0x80, 0x80,
	//  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]

	public uint AbsoluteTick;
	public FLPattern? Pattern;
	public FLAutomation? Automation;
	public uint DurationTicks;
	public FLPlaylistTrack PlaylistTrack;

	public FLPlaylistItem(uint tick, FLPattern pattern, uint duration, FLPlaylistTrack track)
	{
		AbsoluteTick = tick;
		Pattern = pattern;
		DurationTicks = duration;
		PlaylistTrack = track;
	}
	public FLPlaylistItem(uint tick, FLAutomation a, uint duration, FLPlaylistTrack track)
	{
		AbsoluteTick = tick;
		Automation = a;
		DurationTicks = duration;
		PlaylistTrack = track;
	}

	public void Write(EndianBinaryWriter w, List<FLPattern> pats, int numChans, List<FLAutomation> autos, List<FLPlaylistTrack> tracks)
	{
		w.WriteUInt32(AbsoluteTick);
		w.WriteUInt16(0x5000);
		if (Automation is not null)
		{
			int auto0Indexed = autos.IndexOf(Automation) + numChans;
			w.WriteUInt16((ushort)auto0Indexed);
		}
		else
		{
			int pat1Indexed = pats.IndexOf(Pattern!) + 1;
			w.WriteUInt16((ushort)(0x5000 + pat1Indexed));
		}
		w.WriteUInt32(DurationTicks);

		int track1Indexed = tracks.IndexOf(PlaylistTrack) + 1;
		w.WriteUInt16((ushort)(500 - track1Indexed)); // TODO: If I add/remove playlist tracks, does this 500 change?

		w.WriteUInt16(0);
		w.WriteUInt16(120);
		w.WriteByte(0x40);
		w.WriteByte(0);
		w.WriteByte(0x40);
		w.WriteByte(0x64);
		w.WriteUInt16(0x8080);
		if (Automation is not null)
		{
			w.WriteSingle(-1f);
			w.WriteSingle(-1f);
		}
		else
		{
			w.WriteUInt32(uint.MaxValue);
			w.WriteUInt32(uint.MaxValue);
		}
	}
}
