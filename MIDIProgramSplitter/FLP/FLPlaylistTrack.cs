using Kermalis.EndianBinaryIO;
using System;

namespace MIDIProgramSplitter.FLP;

public sealed class FLPlaylistTrack
{
	private static ReadOnlySpan<byte> Part1 => new byte[15] { 0x00, 0x00, 0x48, 0x51, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x3F };
	private static ReadOnlySpan<byte> Part2 => new byte[28]
	{
		0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	};
	private static ReadOnlySpan<byte> Part3 => new byte[19]
	{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00,
		0x00, 0x00, 0x00
	};

	public bool GroupWithAbove;
	public string? Name;

	public FLPlaylistTrack()
	{
		// TODO: color
	}

	internal void Write(EndianBinaryWriter w, int index)
	{
		w.WriteEnum(FLEvent.NewPlaylistTrack);
		FLProjectWriter.WriteArrayEventLength(w, 66);
		w.WriteUInt16((ushort)(index + 1));
		w.WriteBytes(Part1);
		w.WriteByte(index <= 0x20 ? (byte)0xF0 : (byte)0xFF); // TODO: Why
		w.WriteBytes(Part2);
		w.WriteBoolean(GroupWithAbove);
		w.WriteBytes(Part3);

		if (Name is not null)
		{
			FLProjectWriter.WriteUTF16EventWithLength(w, FLEvent.PlaylistTrackName, Name + '\0');
		}
	}
}
